{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BlogService = /*#__PURE__*/(() => {\n  class BlogService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.blogs$ = new BehaviorSubject([]);\n      this.updatedBlogs$ = this.blogs$.asObservable();\n      this.blog$ = new BehaviorSubject({\n        title: '',\n        content: ''\n      });\n      this.updatedBlog$ = this.blog$.asObservable();\n      this.blogIds$ = new BehaviorSubject([]);\n      this.toDeleteBlogIds$ = this.blogIds$.asObservable();\n    }\n\n    getBlogs(category) {\n      return this.http.get(this.baseUrl + `blog/?category=${category}`);\n    }\n\n    getBlog(id) {\n      return this.http.get(this.baseUrl + `blog/${id}`);\n    }\n\n    createBlog(model) {\n      return this.http.post(this.baseUrl + 'blog', model);\n    }\n\n    updateBlog(model) {\n      return this.http.put(this.baseUrl + 'blog', model);\n    }\n\n    deleteBlog(id) {\n      return this.http.delete(this.baseUrl + `blog/${id}`);\n    }\n\n    setBlogs(blogs) {\n      this.blogs$.next(blogs);\n    }\n\n    setBlog(blog) {\n      this.blog$.next(blog);\n    }\n\n    setBlogIds(blogIds) {\n      this.blogIds$.next(blogIds);\n    }\n\n  }\n\n  BlogService.ɵfac = function BlogService_Factory(t) {\n    return new (t || BlogService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BlogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BlogService,\n    factory: BlogService.ɵfac,\n    providedIn: 'root'\n  });\n  return BlogService;\n})();","map":null,"metadata":{},"sourceType":"module"}