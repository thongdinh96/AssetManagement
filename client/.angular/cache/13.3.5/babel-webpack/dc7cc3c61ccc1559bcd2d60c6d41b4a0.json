{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../_forms/text-input/text-input.component\";\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(accountService, fb) {\n      this.accountService = accountService;\n      this.fb = fb;\n    }\n\n    ngOnInit() {\n      this.initializeForm();\n    }\n\n    initializeForm() {\n      this.registerForm = this.fb.group({\n        username: ['', Validators.required],\n        password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(8)]],\n        confirmPassword: ['', [Validators.required, this.matchValues('password')]]\n      });\n      this.registerForm.controls.password.valueChanges.subscribe(() => {\n        this.registerForm.controls.confirmPassword.updateValueAndValidity();\n      });\n    }\n\n    matchValues(matchTo) {\n      return control => {\n        var _a;\n\n        return (control === null || control === void 0 ? void 0 : control.value) === ((_a = control === null || control === void 0 ? void 0 : control.parent) === null || _a === void 0 ? void 0 : _a.controls[matchTo].value) ? null : {\n          isMatching: true\n        };\n      };\n    }\n\n  }\n\n  RegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n\n  RegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 13,\n    vars: 7,\n    consts: [[\"autocomplete\", \"off\", 3, \"formGroup\"], [1, \"text-center\", \"text-primary\"], [3, \"formControl\", \"label\"], [3, \"formControl\", \"label\", \"type\"], [1, \"form-group\", \"text-center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"mr-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"mr-2\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Sign up\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"hr\");\n        i0.ɵɵelement(4, \"app-text-input\", 2);\n        i0.ɵɵelement(5, \"app-text-input\", 2);\n        i0.ɵɵelement(6, \"app-text-input\", 3);\n        i0.ɵɵelement(7, \"app-text-input\", 3);\n        i0.ɵɵelementStart(8, \"div\", 4);\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵtext(10, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 6);\n        i0.ɵɵtext(12, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"label\", \"Username\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"label\", \"Email\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"label\", \"Password\")(\"type\", \"password\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"label\", \"Confirm password\")(\"type\", \"password\");\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i3.TextInputComponent, i2.NgControlStatus, i2.FormControlDirective],\n    styles: [\"\"]\n  });\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}